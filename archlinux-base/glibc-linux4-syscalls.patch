diff --git a/nptl/futex-internal.c b/nptl/futex-internal.c
index 7ec228e8..cd38c93e 100644
--- a/nptl/futex-internal.c
+++ b/nptl/futex-internal.c
@@ -53,6 +53,7 @@ __futex_abstimed_wait_common64 (unsigned int* futex_word,
                                 const struct __timespec64* abstime,
                                 int private, bool cancel)
 {
+  return -ENOSYS;
   if (cancel)
     return INTERNAL_SYSCALL_CANCEL (futex_time64, futex_word, op, expected,
 				    abstime, NULL /* Unused.  */,
@@ -152,7 +153,7 @@ __futex_lock_pi64 (int *futex_word, clockid_t clockid,
   int op_pi2 = __lll_private_flag (FUTEX_LOCK_PI2 | clockbit, private);
 #if __ASSUME_FUTEX_LOCK_PI2
   /* Assume __ASSUME_TIME64_SYSCALLS since FUTEX_LOCK_PI2 was added later.  */
-  err = INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi2, 0, abstime);
+  err = -ENOSYS; //INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi2, 0, abstime);
 #else
   /* FUTEX_LOCK_PI does not support clock selection, so for CLOCK_MONOTONIC
      the only option is to use FUTEX_LOCK_PI2.  */
@@ -160,11 +161,11 @@ __futex_lock_pi64 (int *futex_word, clockid_t clockid,
   int op_pi = abstime != NULL && clockid != CLOCK_REALTIME ? op_pi2 : op_pi1;
 
 # ifdef __ASSUME_TIME64_SYSCALLS
-  err = INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi, 0, abstime);
+  err = -ENOSYS; //INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi, 0, abstime);
 # else
   bool need_time64 = abstime != NULL && !in_time_t_range (abstime->tv_sec);
   if (need_time64)
-    err = INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi, 0, abstime);
+    err = -ENOSYS; //INTERNAL_SYSCALL_CALL (futex_time64, futex_word, op_pi, 0, abstime);
   else
     {
       struct timespec ts32, *pts32 = NULL;
diff --git a/sysdeps/unix/sysv/linux/clock_adjtime.c b/sysdeps/unix/sysv/linux/clock_adjtime.c
index 5ded82f5..3bbc3453 100644
--- a/sysdeps/unix/sysv/linux/clock_adjtime.c
+++ b/sysdeps/unix/sysv/linux/clock_adjtime.c
@@ -29,7 +29,8 @@ __clock_adjtime64 (const clockid_t clock_id, struct __timex64 *tx64)
 #ifndef __NR_clock_adjtime64
 # define __NR_clock_adjtime64 __NR_clock_adjtime
 #endif
-  int r = INLINE_SYSCALL_CALL (clock_adjtime64, clock_id, tx64);
+  int r = -1; //INLINE_SYSCALL_CALL (clock_adjtime64, clock_id, tx64);
+  errno = ENOSYS;
 #ifndef __ASSUME_TIME64_SYSCALLS
   if (r >= 0 || errno != ENOSYS)
     return r;
diff --git a/sysdeps/unix/sysv/linux/clock_getcpuclockid.c b/sysdeps/unix/sysv/linux/clock_getcpuclockid.c
index 5534127e..627c6328 100644
--- a/sysdeps/unix/sysv/linux/clock_getcpuclockid.c
+++ b/sysdeps/unix/sysv/linux/clock_getcpuclockid.c
@@ -34,7 +34,7 @@ __clock_getcpuclockid (pid_t pid, clockid_t *clock_id)
 #ifndef __NR_clock_getres_time64
 # define __NR_clock_getres_time64 __NR_clock_getres
 #endif
-  int r = INTERNAL_SYSCALL_CALL (clock_getres_time64, pidclock, NULL);
+  int r = -ENOSYS; //INTERNAL_SYSCALL_CALL (clock_getres_time64, pidclock, NULL);
 
 #ifndef __ASSUME_TIME64_SYSCALLS
   if (r != 0 && r == -ENOSYS)
diff --git a/sysdeps/unix/sysv/linux/clock_getres.c b/sysdeps/unix/sysv/linux/clock_getres.c
index 38304db3..a94c30d2 100644
--- a/sysdeps/unix/sysv/linux/clock_getres.c
+++ b/sysdeps/unix/sysv/linux/clock_getres.c
@@ -35,9 +35,9 @@ __clock_getres64 (clockid_t clock_id, struct __timespec64 *res)
 #endif
 
 #ifdef HAVE_CLOCK_GETRES64_VSYSCALL
-  r = INLINE_VSYSCALL (clock_getres_time64, 2, clock_id, res);
+  r = ENOSYS; //INLINE_VSYSCALL (clock_getres_time64, 2, clock_id, res);
 #else
-  r = INLINE_SYSCALL_CALL (clock_getres_time64, clock_id, res);
+  r = ENOSYS; //INLINE_SYSCALL_CALL (clock_getres_time64, clock_id, res);
 #endif
   if (r == 0 || errno != ENOSYS)
     return r;
diff --git a/sysdeps/unix/sysv/linux/clock_gettime.c b/sysdeps/unix/sysv/linux/clock_gettime.c
index 01ce2751..a762faca 100644
--- a/sysdeps/unix/sysv/linux/clock_gettime.c
+++ b/sysdeps/unix/sysv/linux/clock_gettime.c
@@ -39,7 +39,7 @@ __clock_gettime64 (clockid_t clock_id, struct __timespec64 *tp)
     = GLRO(dl_vdso_clock_gettime64);
   if (vdso_time64 != NULL)
     {
-      r = INTERNAL_VSYSCALL_CALL (vdso_time64, 2, clock_id, tp);
+      r = ENOSYS; //INTERNAL_VSYSCALL_CALL (vdso_time64, 2, clock_id, tp);
       if (r == 0)
 	return 0;
       return INLINE_SYSCALL_ERROR_RETURN_VALUE (-r);
@@ -65,7 +65,7 @@ __clock_gettime64 (clockid_t clock_id, struct __timespec64 *tp)
     }
 #endif
 
-  r = INTERNAL_SYSCALL_CALL (clock_gettime64, clock_id, tp);
+  r = -ENOSYS; //INTERNAL_SYSCALL_CALL (clock_gettime64, clock_id, tp);
   if (r == 0)
     return 0;
   if (r != -ENOSYS)
diff --git a/sysdeps/unix/sysv/linux/clock_nanosleep.c b/sysdeps/unix/sysv/linux/clock_nanosleep.c
index befe6ecb..403dcf6a 100644
--- a/sysdeps/unix/sysv/linux/clock_nanosleep.c
+++ b/sysdeps/unix/sysv/linux/clock_nanosleep.c
@@ -45,8 +45,7 @@ __clock_nanosleep_time64 (clockid_t clock_id, int flags,
 
   int r;
 #ifdef __ASSUME_TIME64_SYSCALLS
-  r = INTERNAL_SYSCALL_CANCEL (clock_nanosleep_time64, clock_id, flags, req,
-			       rem);
+  r = -ENOSYS; //INTERNAL_SYSCALL_CANCEL (clock_nanosleep_time64, clock_id, flags, req, rem);
 #else
   if (!in_time_t_range (req->tv_sec))
     {
diff --git a/sysdeps/unix/sysv/linux/clock_settime.c b/sysdeps/unix/sysv/linux/clock_settime.c
index 2a32e2eb..eeec7288 100644
--- a/sysdeps/unix/sysv/linux/clock_settime.c
+++ b/sysdeps/unix/sysv/linux/clock_settime.c
@@ -35,7 +35,8 @@ __clock_settime64 (clockid_t clock_id, const struct __timespec64 *tp)
 #ifndef __NR_clock_settime64
 # define __NR_clock_settime64 __NR_clock_settime
 #endif
-  int ret = INLINE_SYSCALL_CALL (clock_settime64, clock_id, tp);
+  int ret = -1; //INLINE_SYSCALL_CALL (clock_settime64, clock_id, tp);
+  errno = ENOSYS;
 
 #ifndef __ASSUME_TIME64_SYSCALLS
   if (ret == 0 || errno != ENOSYS)
diff --git a/sysdeps/unix/sysv/linux/faccessat.c b/sysdeps/unix/sysv/linux/faccessat.c
index 59ee4b6f..8ae56fa0 100644
--- a/sysdeps/unix/sysv/linux/faccessat.c
+++ b/sysdeps/unix/sysv/linux/faccessat.c
@@ -26,7 +26,8 @@
 int
 __faccessat (int fd, const char *file, int mode, int flag)
 {
-  int ret = INLINE_SYSCALL_CALL (faccessat2, fd, file, mode, flag);
+  int ret = -1; //INLINE_SYSCALL_CALL (faccessat2, fd, file, mode, flag);
+  errno = ENOSYS;
 #if __ASSUME_FACCESSAT2
   return ret;
 #else
diff --git a/sysdeps/unix/sysv/linux/kernel-features.h b/sysdeps/unix/sysv/linux/kernel-features.h
index 74adc395..fbc9b371 100644
--- a/sysdeps/unix/sysv/linux/kernel-features.h
+++ b/sysdeps/unix/sysv/linux/kernel-features.h
@@ -203,7 +203,7 @@
 #if __LINUX_KERNEL_VERSION >= 0x050100                          \
   || __WORDSIZE == 64                                           \
   || (defined __SYSCALL_WORDSIZE && __SYSCALL_WORDSIZE == 64)
-# define __ASSUME_TIME64_SYSCALLS 1
+# define DO_NOT_ASSUME_TIME64_SYSCALLS 1
 #endif
 
 /* Linux waitid prior kernel 5.4 does not support waiting for the current
@@ -215,7 +215,7 @@
 /* The faccessat2 system call was introduced across all architectures
    in Linux 5.8.  */
 #if __LINUX_KERNEL_VERSION >= 0x050800
-# define __ASSUME_FACCESSAT2 1
+# define DO_NOT_ASSUME_FACCESSAT2 1
 #else
 # define __ASSUME_FACCESSAT2 0
 #endif
diff --git a/sysdeps/unix/sysv/linux/mq_timedreceive.c b/sysdeps/unix/sysv/linux/mq_timedreceive.c
index 834cd7a4..f4378e36 100644
--- a/sysdeps/unix/sysv/linux/mq_timedreceive.c
+++ b/sysdeps/unix/sysv/linux/mq_timedreceive.c
@@ -39,8 +39,8 @@ ___mq_timedreceive_time64 (mqd_t mqdes, char *__restrict msg_ptr, size_t msg_len
 		     && !in_time_t_range (abs_timeout->tv_sec);
   if (need_time64)
     {
-      int r = SYSCALL_CANCEL (mq_timedreceive_time64, mqdes, msg_ptr, msg_len,
-			      msg_prio, abs_timeout);
+      int r = -1; //SYSCALL_CANCEL (mq_timedreceive_time64, mqdes, msg_ptr, msg_len, msg_prio, abs_timeout);
+      errno = ENOSYS;
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/mq_timedsend.c b/sysdeps/unix/sysv/linux/mq_timedsend.c
index 3ca50509..4f213726 100644
--- a/sysdeps/unix/sysv/linux/mq_timedsend.c
+++ b/sysdeps/unix/sysv/linux/mq_timedsend.c
@@ -39,8 +39,9 @@ ___mq_timedsend_time64 (mqd_t mqdes, const char *msg_ptr, size_t msg_len,
 		     && !in_time_t_range (abs_timeout->tv_sec);
   if (need_time64)
     {
-      int r = SYSCALL_CANCEL (mq_timedsend_time64, mqdes, msg_ptr, msg_len,
-			      msg_prio, abs_timeout);
+      int r = -1; //SYSCALL_CANCEL (mq_timedsend_time64, mqdes, msg_ptr, msg_len, msg_prio, abs_timeout);
+      errno = ENOSYS;
+
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/ppoll.c b/sysdeps/unix/sysv/linux/ppoll.c
index 1105e29b..e1431bba 100644
--- a/sysdeps/unix/sysv/linux/ppoll.c
+++ b/sysdeps/unix/sysv/linux/ppoll.c
@@ -46,8 +46,8 @@ __ppoll64 (struct pollfd *fds, nfds_t nfds, const struct __timespec64 *timeout,
   bool need_time64 = timeout != NULL && !in_time_t_range (timeout->tv_sec);
   if (need_time64)
     {
-      ret = SYSCALL_CANCEL (ppoll_time64, fds, nfds, timeout, sigmask,
-			    __NSIG_BYTES);
+      ret = -1; //SYSCALL_CANCEL (ppoll_time64, fds, nfds, timeout, sigmask, __NSIG_BYTES);
+      errno = ENOSYS;
       if (ret == 0 || errno != ENOSYS)
 	return ret;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/pselect.c b/sysdeps/unix/sysv/linux/pselect.c
index eba1c111..3a099cdf 100644
--- a/sysdeps/unix/sysv/linux/pselect.c
+++ b/sysdeps/unix/sysv/linux/pselect.c
@@ -31,8 +31,7 @@ pselect64_syscall (int nfds, fd_set *readfds, fd_set *writefds,
     {
       (uintptr_t) sigmask, __NSIG_BYTES
     };
-  return SYSCALL_CANCEL (pselect6_time64, nfds, readfds, writefds, exceptfds,
-			 timeout, data);
+  return SYSCALL_CANCEL (pselect6_time64, nfds, readfds, writefds, exceptfds, timeout, data);
 }
 
 int
@@ -59,8 +58,8 @@ __pselect64 (int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
   bool need_time64 = timeout != NULL && !in_time_t_range (timeout->tv_sec);
   if (need_time64)
     {
-      int r = pselect64_syscall (nfds, readfds, writefds, exceptfds, timeout,
-				 sigmask);
+      int r = -1; //pselect64_syscall (nfds, readfds, writefds, exceptfds, timeout, sigmask);
+      errno = ENOSYS;
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/recvmmsg.c b/sysdeps/unix/sysv/linux/recvmmsg.c
index d9664d61..7d7fd5e0 100644
--- a/sysdeps/unix/sysv/linux/recvmmsg.c
+++ b/sysdeps/unix/sysv/linux/recvmmsg.c
@@ -70,7 +70,8 @@ __recvmmsg64 (int fd, struct mmsghdr *vmessages, unsigned int vlen, int flags,
     csize[i] = vmessages[i].msg_hdr.msg_controllen;
 #endif
 
-  int r = recvmmsg_syscall (fd, vmessages, vlen, flags, timeout);
+  int r = -1; //recvmmsg_syscall (fd, vmessages, vlen, flags, timeout);
+  errno = ENOSYS;
 #if __TIMESIZE != 64
   if (r > 0)
     {
@@ -93,7 +94,8 @@ __recvmmsg (int fd, struct mmsghdr *vmessages, unsigned int vlen, int flags,
       ts64 = valid_timespec_to_timespec64 (*timeout);
       pts64 = &ts64;
     }
-  int r = recvmmsg_syscall (fd, vmessages, vlen, flags, pts64);
+  int r = -1; //recvmmsg_syscall (fd, vmessages, vlen, flags, pts64);
+  errno = ENOSYS;
   if (r >= 0 && timeout != NULL)
     /* The remanining timeout will be always less the input TIMEOUT.  */
     *timeout = valid_timespec64_to_timespec (ts64);
diff --git a/sysdeps/unix/sysv/linux/sched_rr_gi.c b/sysdeps/unix/sysv/linux/sched_rr_gi.c
index 19abc995..2a092b4c 100644
--- a/sysdeps/unix/sysv/linux/sched_rr_gi.c
+++ b/sysdeps/unix/sysv/linux/sched_rr_gi.c
@@ -28,7 +28,8 @@ __sched_rr_get_interval64 (pid_t pid, struct __timespec64 *tp)
 #ifndef __NR_sched_rr_get_interval_time64
 # define __NR_sched_rr_get_interval_time64 __NR_sched_rr_get_interval
 #endif
-  int ret = INLINE_SYSCALL_CALL (sched_rr_get_interval_time64, pid, tp);
+  int ret = -1; //INLINE_SYSCALL_CALL (sched_rr_get_interval_time64, pid, tp);
+  errno = ENOSYS;
 #ifndef __ASSUME_TIME64_SYSCALLS
   if (ret == 0 || errno != ENOSYS)
     return ret;
diff --git a/sysdeps/unix/sysv/linux/select.c b/sysdeps/unix/sysv/linux/select.c
index 3bc8b0cc..b5277b90 100644
--- a/sysdeps/unix/sysv/linux/select.c
+++ b/sysdeps/unix/sysv/linux/select.c
@@ -75,8 +75,8 @@ __select64 (int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,
   bool need_time64 = timeout != NULL && !in_time_t_range (timeout->tv_sec);
   if (need_time64)
     {
-      int r = SYSCALL_CANCEL (pselect6_time64, nfds, readfds, writefds,
-			      exceptfds, pts64, NULL);
+      int r = -1; //SYSCALL_CANCEL (pselect6_time64, nfds, readfds, writefds, exceptfds, pts64, NULL);
+      errno = ENOSYS;
       if ((r >= 0 || errno != ENOSYS) && timeout != NULL)
 	{
 	  TIMESPEC_TO_TIMEVAL (timeout, &ts64);
diff --git a/sysdeps/unix/sysv/linux/semtimedop.c b/sysdeps/unix/sysv/linux/semtimedop.c
index 38a401bb..c0697854 100644
--- a/sysdeps/unix/sysv/linux/semtimedop.c
+++ b/sysdeps/unix/sysv/linux/semtimedop.c
@@ -45,7 +45,8 @@ __semtimedop64 (int semid, struct sembuf *sops, size_t nsops,
   bool need_time64 = timeout != NULL && !in_time_t_range (timeout->tv_sec);
   if (need_time64)
     {
-      int r = semtimedop_syscall (semid, sops, nsops, timeout);
+      int r = -1;//semtimedop_syscall (semid, sops, nsops, timeout);
+      errno = ENOSYS;
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/timer_gettime.c b/sysdeps/unix/sysv/linux/timer_gettime.c
index 3ac39979..c55635d1 100644
--- a/sysdeps/unix/sysv/linux/timer_gettime.c
+++ b/sysdeps/unix/sysv/linux/timer_gettime.c
@@ -32,7 +32,8 @@ ___timer_gettime64 (timer_t timerid, struct __itimerspec64 *value)
 # ifndef __NR_timer_gettime64
 #  define __NR_timer_gettime64 __NR_timer_gettime
 # endif
-  int ret = INLINE_SYSCALL_CALL (timer_gettime64, ktimerid, value);
+  int ret = -1; //INLINE_SYSCALL_CALL (timer_gettime64, ktimerid, value);
+  errno = ENOSYS;
 # ifndef __ASSUME_TIME64_SYSCALLS
   if (ret == 0 || errno != ENOSYS)
     return ret;
diff --git a/sysdeps/unix/sysv/linux/timer_settime.c b/sysdeps/unix/sysv/linux/timer_settime.c
index 518fed9c..62aa2c3c 100644
--- a/sysdeps/unix/sysv/linux/timer_settime.c
+++ b/sysdeps/unix/sysv/linux/timer_settime.c
@@ -39,8 +39,8 @@ ___timer_settime64 (timer_t timerid, int flags,
                               ovalue);
 # else
 #  ifdef __NR_timer_settime64
-  int ret = INLINE_SYSCALL_CALL (timer_settime64, ktimerid, flags, value,
-                                 ovalue);
+  int ret = -1; //INLINE_SYSCALL_CALL (timer_settime64, ktimerid, flags, value, ovalue);
+  errno = ENOSYS;
   if (ret == 0 || errno != ENOSYS)
     return ret;
 #  endif
diff --git a/sysdeps/unix/sysv/linux/timerfd_gettime.c b/sysdeps/unix/sysv/linux/timerfd_gettime.c
index 9bd0e026..c42bbb39 100644
--- a/sysdeps/unix/sysv/linux/timerfd_gettime.c
+++ b/sysdeps/unix/sysv/linux/timerfd_gettime.c
@@ -32,7 +32,8 @@ __timerfd_gettime64 (int fd, struct __itimerspec64 *value)
 #ifdef __ASSUME_TIME64_SYSCALLS
   return INLINE_SYSCALL_CALL (timerfd_gettime64, fd, value);
 #else
-  int ret = INLINE_SYSCALL_CALL (timerfd_gettime64, fd, value);
+  int ret = -1;//INLINE_SYSCALL_CALL (timerfd_gettime64, fd, value);
+  errno = ENOSYS;
   if (ret == 0 || errno != ENOSYS)
     return ret;
   struct itimerspec its32;
diff --git a/sysdeps/unix/sysv/linux/timerfd_settime.c b/sysdeps/unix/sysv/linux/timerfd_settime.c
index 59282bf1..e1966ee3 100644
--- a/sysdeps/unix/sysv/linux/timerfd_settime.c
+++ b/sysdeps/unix/sysv/linux/timerfd_settime.c
@@ -37,8 +37,8 @@ __timerfd_settime64 (int fd, int flags, const struct __itimerspec64 *value,
 		     || !in_time_t_range (value->it_interval.tv_sec);
   if (need_time64)
     {
-      int r = INLINE_SYSCALL_CALL (timerfd_settime64, fd, flags, value,
-				   ovalue);
+      int r = -1;//INLINE_SYSCALL_CALL (timerfd_settime64, fd, flags, value, ovalue);
+      errno = ENOSYS;
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
diff --git a/sysdeps/unix/sysv/linux/utimensat.c b/sysdeps/unix/sysv/linux/utimensat.c
index 5662ecc9..6c5477ae 100644
--- a/sysdeps/unix/sysv/linux/utimensat.c
+++ b/sysdeps/unix/sysv/linux/utimensat.c
@@ -46,8 +46,8 @@ __utimensat64_helper (int fd, const char *file,
 			     && !in_time_t_range (tsp64[1].tv_sec)));
   if (need_time64)
     {
-      int r = INLINE_SYSCALL_CALL (utimensat_time64, fd, file, &tsp64[0],
-				   flags);
+      int r = -1; //INLINE_SYSCALL_CALL (utimensat_time64, fd, file, &tsp64[0], flags);
+      errno = ENOSYS;
       if (r == 0 || errno != ENOSYS)
 	return r;
       __set_errno (EOVERFLOW);
